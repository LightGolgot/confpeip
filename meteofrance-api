import time
from meteofrance_api import MeteoFranceClient
from meteofrance_api import model
import matplotlib.pyplot as plt

"""
COMMENT MARCHE L'API METEOFRANCE :
Il y a deux gros composants dans cet API : MeteoFranceClient et model, le premier permet de récuperer les données du site météofrance et le second de convertir ces
données en un modèle intéressant à étudier pour nous.

- La classe weather_data hérite de MeteoFranceClient (jsp pouquoi j'ai fait ça mais ça peut servir je pense)
- next_rain_hour renvoie la durée (en seconde) de la prochaine pluie dans l'heure (s'il y en a une)
- temperature renvoie la température du jour (mesurée par Météofrance
- rain_forecast renvoie les prévisions de pluies par tranches de 5 minutes (1=pas de pluie, 5=forte averse)
- probability renvoie les probabilités de pluie par tranche de 6h pour les 15 prochains jours
=> Il est possible de récupérer la probabilité de pluie par tranche de 3h mais sur une plus courte durée (peut être + utile)
- date sert à rien lahuiss
- humidity renvoie l'humidité de l'air sur une periode de jsp
"""

class weather_data(MeteoFranceClient):
    def __init__(self, dept):
        self.client = MeteoFranceClient()
        self.city = self.client.search_places(dept)[0]
        self.cast = self.client.get_forecast_for_place(self.city)
        self.raincast = self.client.get_rain(self.city.latitude, self.city.longitude)
        self.pic = self.client.get_picture_of_the_day('france')

    def next_rain_hour(self):
        today_rain = self.client.get_rain(self.city.latitude, self.city.longitude)
        dt = today_rain.next_rain_date_locale() # temps (en secondes) avant la prochaine pluie dans l'heure
        return dt.timestamp() - time.time() if dt != None else None

    def temperature(self):
        temp = self.cast.today_forecast
        return temp['T']

    def rain_forecast(self):
        rain_model = model.Rain(self.raincast.raw_data)
        return [rain_model.forecast[i]['rain'] for i in range(len(rain_model.forecast))] #Prévisons par tranches de cinq minutes !!

    def probability(self):
        forecast_model = model.Forecast(self.cast.raw_data)
        T = [0 if forecast_model.probability_forecast[i]['rain']['6h']==None else forecast_model.probability_forecast[i]['rain']['6h'] for i in range(len(forecast_model.probability_forecast))]
        return T

    def date(self):
        forecast_model = model.Forecast(self.cast.raw_data)
        return [forecast_model.timestamp_to_locale_time(forecast_model.probability_forecast[i]['dt']) for i in range(len(forecast_model.probability_forecast))]

    def humidity(self):
        forecast_model = model.Forecast(self.cast.raw_data)
        return [forecast_model.forecast[i]['humidity'] for i in range(len(forecast_model.forecast))]

    def nxt_rain(self, seuil):
        P = self.probability()
        for i in range(len(P)):
            if P[i] > seuil:
                return i
            return len(P)

    def bilan(self, j, quantity):
        P = self.probability()
        print(P)
        S = 0
        for i in range(j*3):
            S = S + quantity(P[i])
        return S
